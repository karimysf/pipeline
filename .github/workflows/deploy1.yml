  name: Docker Image CI/CD

  on:
    push:
      branches:
        - master
      
    workflow_dispatch:

  env: 
    IMAGE_NAME: fevertokens-technical-assesst
    TAG: latest
    SSH_PORT: 22

  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Building the Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} -f src/Dockerfile src
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Push image to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

    deploy: 
      runs-on: self-hosted
      needs: [build]
      defaults:
        run:
          shell: bash
      steps: 
      - name: Check out the repo
        uses: actions/checkout@v4

    
      - name: Deploy to Docker Swarm
        env:
          MANAGER_IP: ${{ vars.MANAGER_IP }}
          WORKER_IP: ${{ vars.WORKER_IP }}
          MANAGER_HOST: ${{ vars.MANAGER_HOST }}
          SSH_PORT: ${{ vars.SSH_PORT }}
        run: |
            # Prepare SSH access
            HOSTNAME=${MANAGER_HOST#*@}
            echo "Setting un SSH for Connection"
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/play
            chmod 600 ~/.ssh/play
            ssh-keygen -R "[$MANAGER_HOST]:$SSH_PORT" || true
            ssh-keyscan -p $SSH_PORT $MANAGER_HOST >> ~/.ssh/known_hosts
            
            echo "NOW TESTING CONNECTION"
            #SSH TEST
            ssh -i ~/.ssh/play -p $SSH_PORT ip172-18-0-48-d0sck9291nsg00bvhmb0@direct.labs.play-with-docker.com "echo SSH connection successful"



            # Set up environment
            export DOCKERHUB_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ env.TAG }}"
            export WORKER_NODE_ROLE="worker"
        
            # Create final compose file
            envsubst < docker-compose.yml > docker-compose-deploy.yml
            cat docker-compose-deploy.yml
        
            # Copy to manager using SFTP
            echo "Copying docker-compose to manager via SFTP"
            sftp -i ~/.ssh/play -P $SSH_PORT $MANAGER_HOST << EOF
              put docker-compose-deploy.yml docker-compose.yml
              bye
            EOF
            echo "✅ Copy successful"
        
            # Connect and deploy
            echo "✅ Connecting to manager and deploying"
            ssh -i ~/.ssh/play -p $SSH_PORT $MANAGER_HOST "sudo docker stack deploy -c ~/docker-compose.yml feverTokens-tech-assesst-service"

        


